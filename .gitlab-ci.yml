stages:
    - build-server
    - build-BackEnd
    - test-server
    - test-frontend
    - deploy-server
    - release-frontend

before_script:
    ##
    ## fix "Could not open a connection to your authentication agent."
    ##
    - ssh-agent bash
    
    ##
    ## Add ssh keys and know hosts for scp
    ##
    - echo "$DEPLOY_SSH_PRIVATE_KEY" >> ~/.ssh/id_rsa
    - echo "$DEPLOY_SSH_PUBLIC_KEY" >> ~/.ssh/id_rsa.pub
    - ssh-keyscan dev.hanzec.com >> ~/.ssh/known_hosts
    
    ##
    ##
    ## Set correct file permission for these file
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - chmod 644 ~/.ssh/known_hosts
    - chmod 600 ~/.ssh/id_rsa ~/.ssh/id_rsa.pub  

build-frontend:
  stage: build-server
  image: jangrewe/gitlab-ci-android
  script:
  script:
  - cd ./FrontEnd
  - ./gradlew assembleDebug
  - mv FrontEnd/app/build/outputs/apk/app-debug.apk FrontEnd/app/build/outputs/apk/$CI_COMMIT_TAG.apk
  artifacts:
    paths:
    - FrontEnd/app/build/outputs/apk/$CI_COMMIT_TAG.apk

public-release:
  image: pstauffer/curl:v1.0.3
  stage: release-frontend
  only:
    - tags
  before_script:
    - ''
  script:
    - curl --request POST
      --header 'Content-Type:application/json'
      --header "PRIVATE-TOKEN:$GITLAB_ACCESS_TOKEN"
      --data '{"name":"'$CI_COMMIT_TAG'","tag_name":"'$CI_COMMIT_TAG'","description":"Version '$CI_COMMIT_TAG'"}'
      https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/releases
    - curl --request POST
      --header "PRIVATE-TOKEN:$GITLAB_ACCESS_TOKEN"
      --data name="$CI_COMMIT_TAG.apk"
      --data url="https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/jobs/$CI_JOB_ID/artifacts/$CI_COMMIT_TAG.apk"
      "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG/assets/links"
  when: on_success

build-server:
  stage: build-server
  script: 
  - cd ./BackEnd
  - mvn -Dmaven.test.skip=true package
  - mv target/cyschedule-server-*.jar target/cyschedule-server-new.jar 
  artifacts:
    paths:
      - BackEnd/target/cyschedule-server-new.jar

test-server:
  stage: test-frontend
  script:
  - cd ./BackEnd
  - mvn test

deploy-server:
  stage: deploy-server
  only:
    - master
  script:
  ##
  ## Copy exec file from runner to production server
  ##
  - scp BackEnd/target/cyschedule-server-new.jar $DEPLOY_SSH_USER@$DEPLOY_SERVER:/opt/cyshedule-server
  
  ##
  ## Login to production serverï¼ŒDelete the old file and replace with new one
  ##
  - ssh $DEPLOY_SSH_USER@$DEPLOY_SERVER "cd /opt/cyshedule-server && rm -rf cyschedule-server.jar && mv cyschedule-server-new.jar cyschedule-server.jar"
  
  ##
  ## Remove old logging file
  ##
  - ssh $DEPLOY_SSH_USER@$DEPLOY_SERVER "rm -rf /opt/cyshedule-server/nohup.out"
  
  ##
  ##Clean the old caches
  ##
  - ssh $DEPLOY_SSH_USER@$DEPLOY_SERVER "redis-cli FLUSHALL"
  
  ##
  ## Start the new server
  ##
  - ssh $DEPLOY_SSH_USER@$DEPLOY_SERVER "cd /opt/cyshedule-server/ && ./exec_script.sh >> /dev/null"
  only:
  - master


